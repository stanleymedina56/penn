/**
 * navigation.js
 *
 * Handles toggling the navigation menu for small screens and enables tab
 * support for dropdown menus.
 */
( function( $ ) {
	var container, button, menu, links, subMenus;

	container = document.getElementById( 'site-navigation' );
	if ( ! container ) {
		return;
	}

	button = container.getElementsByTagName( 'button' )[0];
	if ( 'undefined' === typeof button ) {
		return;
	}

	menu = container.getElementsByTagName( 'ul' )[0];

	// Hide menu toggle button if menu is empty and return early.
	if ( 'undefined' === typeof menu ) {
		button.style.display = 'none';
		return;
	}

	menu.setAttribute( 'aria-expanded', 'false' );
	if ( -1 === menu.className.indexOf( 'nav-menu' ) ) {
		menu.className += ' nav-menu';
	}

	button.onclick = function() {
		if ( -1 !== container.className.indexOf( 'toggled' ) ) {
			container.className = container.className.replace( ' toggled', '' );
			button.setAttribute( 'aria-expanded', 'false' );
			menu.setAttribute( 'aria-expanded', 'false' );
		} else {
			container.className += ' toggled';
			button.setAttribute( 'aria-expanded', 'true' );
			menu.setAttribute( 'aria-expanded', 'true' );
		}
	};

	// Get all the link elements within the menu.
	links    = menu.getElementsByTagName( 'a' );
	subMenus = menu.getElementsByTagName( 'ul' );

	// Set menu items with submenus to aria-haspopup="true".
	for ( var i = 0, len = subMenus.length; i < len; i++ ) {
		subMenus[i].parentNode.setAttribute( 'aria-haspopup', 'true' );
	}

	// Each time a menu link is focused or blurred, toggle focus.
	for ( i = 0, len = links.length; i < len; i++ ) {
		links[i].addEventListener( 'focus', toggleFocus, true );
		links[i].addEventListener( 'blur', toggleFocus, true );
	}

	/**
	 * Sets or removes .focus class on an element.
	 */
	function toggleFocus() {
		var self = this;

		// Move up through the ancestors of the current link until we hit .nav-menu.
		while ( -1 === self.className.indexOf( 'nav-menu' ) ) {

			// On li elements toggle the class .focus.
			if ( 'li' === self.tagName.toLowerCase() ) {
				if ( -1 !== self.className.indexOf( 'focus' ) ) {
					self.className = self.className.replace( ' focus', '' );
				} else {
					self.className += ' focus';
				}
			}

			self = self.parentElement;
		}
	}

	function initMainNavigation( container ) {
		// Add dropdown toggle that display child menu items.
		container.find( '.menu-item-has-children > a, .page_item_has_children > a' ).after( '<button class="dropdown-toggle" aria-expanded="false">' + screenReaderText.expand + '</button>' );

		// Toggle buttons and submenu items with active children menu items.
		container.find( '.current-menu-ancestor > button' ).addClass( 'toggle-on' );
		container.find( '.current-menu-ancestor > .sub-menu' ).addClass( 'toggled-on' );

		container.find( '.dropdown-toggle' ).click( function( e ) {
			var _this = $( this );
			e.preventDefault();
			_this.toggleClass( 'toggle-on' );
			_this.next( '.children, .sub-menu' ).toggleClass( 'toggled-on' );
			_this.attr( 'aria-expanded', _this.attr( 'aria-expanded' ) === 'false' ? 'true' : 'false' );
			_this.html( _this.html() === screenReaderText.expand ? screenReaderText.collapse : screenReaderText.expand );
		} );
	}
	initMainNavigation( $( '.main-navigation' ) );

	// Re-initialize the main navigation when it is updated, persisting any existing submenu expanded states.
	$( document ).on( 'customize-preview-menu-refreshed', function( e, params ) {
		if ( 'primary' === params.wpNavMenuArgs.theme_location ) {
			initMainNavigation( params.newContainer );

			// Re-sync expanded states from oldContainer.
			params.oldContainer.find( '.dropdown-toggle.toggle-on' ).each(function() {
				var containerId = $( this ).parent().prop( 'id' );
				$( params.newContainer ).find( '#' + containerId + ' > .dropdown-toggle' ).triggerHandler( 'click' );
			});
		}
	});

	// Hide/show toggle button on scroll

	var position, direction, previous;

	$(window).scroll(function(){
		if( $(this).scrollTop() >= position ){
			direction = 'down';
			if(direction !== previous){
				$('.menu-toggle').addClass('hide');

				previous = direction;
			}
		} else {
			direction = 'up';
			if(direction !== previous){
				$('.menu-toggle').removeClass('hide');

				previous = direction;
			}
		}
		position = $(this).scrollTop();
	});

	// Wrap centered images in a new figure element
	$( 'img.aligncenter' ).wrap( '<figure class="centered-image"></figure>');

} )( jQuery );

var themeProps = {};
themeProps.searchVisible = false;

jQuery(document).ready(function($) {
  if(document.getElementById('mobile-menu')) {
    new mlPushMenu( document.getElementById( 'mp-menu' ), document.getElementById( 'mobile-menu' ), {type : 'cover'});
  }
  if(Modernizr.csstransforms3d) {
    $('#off-canvas-nav').toggleClass('nav-toggle');
  }
  $('#mob-search a').click(function() {
    if(!$('#off-canvas-search').hasClass('search-toggle')) {
      themeProps.searchVisible = true;
      $('#off-canvas-search').slideDown();
      $('#off-canvas-search').addClass('search-toggle');
    }
    else {
      themeProps.searchVisible = false;
      $('#off-canvas-search').slideUp();
      $('#off-canvas-search').removeClass('search-toggle');
    }

  	$('#off-canvas-search-sticky-wrapper').toggleClass('search-toggle');
  });

  /* Stop searches for empty strings */
  $('form[role="search"]').submit(function(event) {
    var searchTerm = '';
    $('form[role="search"] input[name="s"]').each(function(){
      searchTerm += $(this).val().trim();
    });
    if(!searchTerm) {
      event.preventDefault();
      alert('Please enter a search term');
    }
  });

  $('#mobile-wrapper').sticky({ topSpacing: 0, responsiveWidth: true, widthFromWrapper: false });

  /* Hide search if it is open and then we resize to 810px or greater width */
  $( window ).resize(function() {
    /* check this flag first since it should be less expensive than getting window sizes */
    if(themeProps.searchVisible) {

      var w = window
       ,d = document
       ,e = d.documentElement
       ,g = d.getElementsByTagName('body')[0]
       ,x = w.innerWidth || e.clientWidth || g.clientWidth
       ,hideSearch = (x >= 810);

      if(hideSearch) {
        themeProps.searchVisible = false;
        $('#off-canvas-search').hide();
        $('#off-canvas-search').removeClass('search-toggle');
      }
    }
  });

  /* Toggle the comments block open/close */
  $('.comments-link-gray a').click(function() {
    $('#comments').toggleClass('comments-toggle');
  });
  if(window.location.href.indexOf("#comments") >= 0 || window.location.href.indexOf("#respond") >= 0 ) {
    $('#comments').toggleClass('comments-toggle');
  }
  if ($(".widget_nav_menu").length) {
    $(".widget_nav_menu ul li").find(".menu-item-has-children > a").after("<span class='open-accordion' data-accordion='true' tabindex='0' role='button' aria-expanded='false' aria-label='toggle submenu'></span>");
    $(".widget_nav_menu ul li").find(".menu-item-has-children .sub-menu").addClass("accordion-container");
    $(".current-menu-item").parent().parent().find(" > .open-accordion").addClass("expanded");
    $(".current-menu-item").parent().parent().find(" > .open-accordion").attr("aria-expanded", true);
    $(".current-menu-item").parent().parent().find(" > .accordion-container").addClass("active-accordion");
    if ($(".current-menu-item").find("> .accordion-container").length) {
      $(".current-menu-item").find("> .accordion-container").css("display", "block");
      $(".current-menu-item").find(" > .open-accordion").addClass("expanded");
      $(".current-menu-item").find(" > .open-accordion").attr("aria-expanded", true);
    }
  }
  $("[data-accordion=true]").on("click", function(event) {
    event.preventDefault();
    toggleThirdLevel($(this));
  });
  $("[data-accordion=true]").on("keydown", function(event) {
    if (event.which == 13) {
      event.preventDefault();
      toggleThirdLevel($(this));
    }
  });

  /**
   * Toggle the accordion of the sub menu.
   */
  function toggleThirdLevel(event) {
    event.next(".accordion-container").slideToggle(250);
    event.toggleClass('expanded');
    event.attr("aria-expanded", function(index, attr) {
      return attr == "true" ? "false" : "true";
    } );
  }


/* Gravity forms make fields read-only if gf_readonly class exists on input or textarea */
$('.gf_readonly input').attr('readonly', 'readonly');
$('.gf_readonly textarea').attr('readonly','readonly');

});
